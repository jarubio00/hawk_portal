generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//updatedAt          DateTime                   @updatedAt
model User {
  id                   Int                           @id @default(autoincrement())
  nombre               String?
  email                String                        @unique
  imagen               String?
  hashedPassword       String?
  nivelId              Int                           @default(1)
  categoriaId          Int                           @default(1)
  saldo                Float                         @default(0)
  tipo                 Int                           @default(0)
  credito              Boolean                       @default(false)
  limiteCredito        Float                         @default(0)
  direccionDefaultId   Int?
  loggedIn             Boolean                       @default(false)
  createdAt            DateTime                      @default(dbgenerated("(now())"))
  createdBy            Int                           @default(1)
  updatedAt            DateTime                      @default(dbgenerated("(now())"))
  lastLoginAt          DateTime?
  countryCode          String?
  celular              String?
  empresa              String?
  kommoContactId       Int?
  whatsappEnabled      Boolean?                      @default(false)
  cobrosPermitidos     Boolean                       @default(false)
  deleted              Boolean                       @default(false)
  deletedAt            DateTime?
  deletedBy            Int?
  disabled             Boolean                       @default(false)
  disabledAt           DateTime?
  disabledBy           Int?
  passwordType         String                        @default("bcrypt")
  md5Pass              String?
  sysopTel             String?
  migrated             Boolean                       @default(true)
  accounts             Account[]
  checklist            ClientesChecklist?
  cobros               CobrosDestino[]
  destinos             Destino[]
  direcciones          Direccion[]
  paquetes             Paquete[]
  pedidos              Pedido[]
  pedidosHistory       PedidoHistory[]
  recolecciones        Recoleccion[]
  cobrosCortes         CobrosCortes[]
  kommoSync            KommoSync[]
  recoleccionesHistory RecoleccionHistory[]
  nivel                CatalogoNivelesClientes       @relation(fields: [nivelId], references: [id], onDelete: NoAction)
  categoria            CatalogoCategoriasClientes    @relation(fields: [categoriaId], references: [id], onDelete: NoAction)
  actividad            ActividadPlataformaClientes[]

  @@fulltext([nombre])
  @@fulltext([email])
  @@map("Clientes")
}

model CatalogoNivelesClientes {
  id        Int      @id @default(autoincrement())
  nivel     String
  desc      String?
  puntos    Int      @default(0)
  color     String?
  imagenUrl String?  @db.LongText
  createdAt DateTime @default(dbgenerated("(now())"))
  createdBy Int      @default(1)
  clientes  User[]
}

model CatalogoCategoriasClientes {
  id        Int      @id @default(autoincrement())
  categoria String
  desc      String?
  createdAt DateTime @default(dbgenerated("(now())"))
  createdBy Int      @default(1)
  clientes  User[]
}

model ClientesChecklist {
  id                  Int       @id @default(autoincrement())
  correoVerificado    Boolean   @default(true)
  correoVerificadoAt  DateTime  @default(dbgenerated("(now())"))
  celularVerificado   Boolean   @default(true)
  celularVerificadoAt DateTime  @default(dbgenerated("(now())"))
  tutorialTomado      Boolean   @default(true)
  tutorialTomadoAt    DateTime?
  firstLogin          Boolean   @default(false)
  firstLoginAt        DateTime?
  clienteV2           Boolean   @default(true)
  clienteEmail        String    @unique
  email               User      @relation(fields: [clienteEmail], references: [email], onDelete: Cascade)
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Accounts_userId_fkey")
  @@map("Accounts")
}

model Recoleccion {
  id                   Int                          @id @default(autoincrement())
  clienteId            Int
  estatusRecoleccionId Int                          @default(1)
  fecha                DateTime
  bloque               Int
  contactoNombre       String
  contactoTel          String
  cpId                 Int
  calle                String
  numero               String
  numeroInt            String
  colonia              String
  otraColonia          Boolean                      @default(false)
  municipioId          Int
  empresa              String?
  referencias          String?                      @db.LongText
  lat                  String?
  lng                  String?
  createdAt            DateTime                     @default(now()) @db.DateTime(0)
  updatedAt            DateTime?                    @default(now()) @db.DateTime(0)
  updatedBy            Int?
  direccionId          Int?
  direccionIcon        String?
  direccionColor       String?
  migrated             Boolean                      @default(false)
  pedidos              Pedido[]
  cliente              User                         @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  estatus              CatalogoEstatusRecolecciones @relation(fields: [estatusRecoleccionId], references: [id], onDelete: Cascade)
  municipio            CatalogoMunicipios           @relation(fields: [municipioId], references: [id], onDelete: Cascade)
  cp                   CatalogoCodigosPostales      @relation(fields: [cpId], references: [id], onDelete: NoAction)

  @@index([clienteId], map: "Recolecciones_clienteId_fkey")
  @@index([estatusRecoleccionId], map: "Recolecciones_estatusRecoleccionId_fkey")
  @@index([municipioId], map: "Recolecciones_municipioId_fkey")
  @@map("Recolecciones")
}

model RecoleccionHistory {
  id                     Int                           @id @default(autoincrement())
  clienteId              Int?
  estatusRecoleccionId   Int?                          @default(1)
  fecha                  DateTime?
  bloque                 Int?
  contactoNombre         String?
  contactoTel            String?
  cpId                   Int?                          @default(97777)
  calle                  String?
  numero                 String?
  numeroInt              String?
  colonia                String?
  otraColonia            Boolean?                      @default(false)
  municipioId            Int?                          @default(1)
  empresa                String?
  referencias            String?                       @db.LongText
  lat                    String?
  lng                    String?
  fechaOriginal          DateTime?
  bloqueOriginal         Int?
  recoleccionActualizada Boolean                       @default(false)
  createdAt              DateTime?                     @default(now()) @db.DateTime(0)
  updatedAt              DateTime?                     @default(now()) @db.DateTime(0)
  updatedBy              Int?
  direccionId            Int?
  direccionIcon          String?
  direccionColor         String?
  pedidos                PedidoHistory[]
  cliente                User?                         @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  estatus                CatalogoEstatusRecolecciones? @relation(fields: [estatusRecoleccionId], references: [id], onDelete: Cascade)
  municipio              CatalogoMunicipios?           @relation(fields: [municipioId], references: [id], onDelete: Cascade)
  cpHistory              CatalogoCodigosPostales?      @relation(fields: [cpId], references: [id], onDelete: NoAction)

  @@index([clienteId], map: "RecoleccionesHistory_clienteId_fkey")
  @@index([estatusRecoleccionId], map: "RecoleccionesHistory_estatusRecoleccionId_fkey")
  @@index([municipioId], map: "RecoleccionesHistory_municipioId_fkey")
  @@map("RecoleccionesHistory")
}

model Pedido {
  id                    Int                     @id @default(autoincrement())
  clienteId             Int
  recoleccionId         Int
  estatusPedidoId       Int                     @default(1)
  fechaEntrega          DateTime
  bloqueEntrega         Int
  entregaContactoNombre String?
  entregaContactoTel    String?
  entregaCpId           Int
  entregaCalle          String
  entregaNumero         String?
  entregaNumeroInt      String?
  entregaColonia        String
  entregaOtraColonia    Boolean                 @default(false)
  entregaMunicipioId    Int
  entregaEmpresa        String?
  entregaReferencias    String?                 @db.LongText
  entregaLat            String?
  entregaLng            String?
  paqTipoId             Int
  paqEmpaqueId          Int                     @default(1)
  paqAncho              Float
  paqLargo              Float
  paqAlto               Float
  paqPeso               Float
  paqContenido          String?
  paqPesoVol            Float
  precioVenta           Float
  formaPagoId           Int                     @default(1)
  estatusPagoId         Int                     @default(1)
  cobroDestino          Boolean                 @default(false)
  cobroDestinoCantidad  Float                   @default(0)
  cobroDestinoId        Int?
  batched               Boolean                 @default(false)
  printBatchId          Int?
  printBatchNumber      Int?
  printed               Boolean?                @default(false)
  comprobante           Boolean                 @default(false)
  comprobanteUrl        String?                 @db.LongText
  fechaEntregaOriginal  DateTime?
  bloqueEntregaOriginal Int?
  entregaActualizada    Boolean                 @default(false)
  createdAt             DateTime                @default(dbgenerated("(now())"))
  updatedAt             DateTime?               @default(now()) @db.DateTime(0)
  updatedBy             Int?                    @default(1)
  labelImageUrl         String?                 @db.LongText
  labelPdfUrl           String?                 @db.LongText
  migrated              Boolean                 @default(false)
  migratedAt            DateTime?
  migratedBy            String?
  userCreated           Boolean                 @default(true)
  cobro                 CobrosDestino?
  operaciones           Operaciones?
  user                  User                    @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  municipio             CatalogoMunicipios      @relation(fields: [entregaMunicipioId], references: [id], onDelete: Cascade)
  estatusPago           CatalogoEstatusPago     @relation(fields: [estatusPagoId], references: [id], onDelete: Cascade)
  estatusPedido         CatalogoEstatusPedidos  @relation(fields: [estatusPedidoId], references: [id], onDelete: Cascade)
  formaPago             CatalogoMetodosPago     @relation(fields: [formaPagoId], references: [id], onDelete: Cascade)
  tipoPaquete           CatalogoTiposPaquetes   @relation(fields: [paqTipoId], references: [id], onDelete: Cascade)
  recoleccion           Recoleccion             @relation(fields: [recoleccionId], references: [id], onDelete: Cascade)
  entregaCp             CatalogoCodigosPostales @relation(fields: [entregaCpId], references: [id], onDelete: NoAction)
  printBatch            PrintBatch?             @relation(fields: [printBatchId], references: [id])
  incidencias           Incidencia[]
  actividad             ActividadOperaciones[]
  approute              AppRouteGuias[]

  @@index([clienteId], map: "Pedidos_clienteId_fkey")
  @@index([estatusPagoId], map: "Pedidos_estatusPagoId_fkey")
  @@index([formaPagoId], map: "Pedidos_formaPagoId_fkey")
  @@index([recoleccionId], map: "Pedidos_recoleccionId_fkey")
  @@index([entregaMunicipioId], map: "Pedidos_entregaMunicipioId_fkey")
  @@index([estatusPedidoId], map: "Pedidos_estatusPedidoId_fkey")
  @@index([paqTipoId], map: "Pedidos_paqTipoId_fkey")
  @@map("Pedidos")
}

model PrintBatch {
  id        Int        @id @default(autoincrement())
  corteId   Int
  nombre    String?
  grupo     Int?
  printer   Int?
  printed   Boolean    @default(false)
  printedAt DateTime?
  createdAt DateTime   @default(dbgenerated("(now())"))
  createdBy Int        @default(1)
  corte     PrintCorte @relation(fields: [corteId], references: [id])
  pedidos   Pedido[]
}

model PrintCorte {
  id        Int          @id @default(autoincrement())
  nombre    String?
  fecha     DateTime     @db.Date
  bloque    Int
  createdAt DateTime     @default(dbgenerated("(now())"))
  createdBy Int          @default(1)
  batches   PrintBatch[]
}

model PedidoHistory {
  id                    Int                      @id
  clienteId             Int?
  recoleccionId         Int?
  estatusPedidoId       Int?                     @default(1)
  fechaEntrega          DateTime?
  bloqueEntrega         Int?
  entregaContactoNombre String?
  entregaContactoTel    String?
  entregaCpId           Int?                     @default(97777)
  entregaCalle          String?
  entregaNumero         String?
  entregaNumeroInt      String?
  entregaColonia        String?
  entregaOtraColonia    Boolean?                 @default(false)
  entregaMunicipioId    Int?                     @default(1)
  entregaEmpresa        String?
  entregaReferencias    String?                  @db.LongText
  entregaLat            String?
  entregaLng            String?
  paqTipoId             Int?                     @default(1)
  paqEmpaqueId          Int?                     @default(1)
  paqAncho              Float?
  paqLargo              Float?
  paqAlto               Float?
  paqPeso               Float?
  paqContenido          String?
  paqPesoVol            Float?
  precioVenta           Float?
  formaPagoId           Int?                     @default(1)
  estatusPagoId         Int?                     @default(1)
  cobroDestino          Boolean?                 @default(false)
  cobroDestinoCantidad  Float?                   @default(0)
  cobroDestinoId        Int?
  batched               Boolean                  @default(false)
  printBatchId          Int?
  printBatchNumber      Int?
  printed               Boolean?
  comprobante           Boolean?                 @default(false)
  comprobanteUrl        String?                  @db.LongText
  createdAt             DateTime                 @default(now()) @db.DateTime(0)
  updatedAt             DateTime?                @updatedAt
  updatedBy             Int?                     @default(1)
  labelImageUrl         String?                  @db.LongText
  labelPdfUrl           String?                  @db.LongText
  user                  User?                    @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  municipio             CatalogoMunicipios?      @relation(fields: [entregaMunicipioId], references: [id], onDelete: Cascade)
  estatusPago           CatalogoEstatusPago?     @relation(fields: [estatusPagoId], references: [id], onDelete: Cascade)
  estatusPedido         CatalogoEstatusPedidos?  @relation(fields: [estatusPedidoId], references: [id], onDelete: Cascade)
  formaPago             CatalogoMetodosPago?     @relation(fields: [formaPagoId], references: [id], onDelete: Cascade)
  tipoPaquete           CatalogoTiposPaquetes?   @relation(fields: [paqTipoId], references: [id], onDelete: Cascade)
  recoleccion           RecoleccionHistory?      @relation(fields: [recoleccionId], references: [id], onDelete: Cascade)
  entregaCp             CatalogoCodigosPostales? @relation(fields: [entregaCpId], references: [id], onDelete: NoAction)

  @@index([clienteId], map: "PedidosHistory_clienteId_fkey")
  @@index([estatusPagoId], map: "PedidosHistory_estatusPagoId_fkey")
  @@index([formaPagoId], map: "PedidosHistory_formaPagoId_fkey")
  @@index([recoleccionId], map: "PedidosHistory_recoleccionId_fkey")
  @@index([entregaMunicipioId], map: "PedidosHistory_entregaMunicipioId_fkey")
  @@index([estatusPedidoId], map: "PedidosHistory_estatusPedidoId_fkey")
  @@index([paqTipoId], map: "PedidosHistory_paqTipoId_fkey")
  @@map("PedidosHistory")
}

model Operaciones {
  id                  Int       @id @default(autoincrement())
  pedidoId            Int       @unique
  punteoRecoleccion   Boolean?  @default(false)
  punteoRecoleccionAt DateTime?
  punteoRecoleccionBy Int?
  recolectadoAt       DateTime?
  recolectado         Boolean?  @default(false)
  recolectadoBy       Int?
  recolectadoFrom     String?
  reciboAt            DateTime?
  recibo              Boolean?  @default(false)
  reciboBy            Int?
  punteoEntregaAt     DateTime?
  punteoEntrega       Boolean?  @default(false)
  punteoEntregaBy     Int?
  entregadoAt         DateTime?
  entregado           Boolean?  @default(false)
  entregadoBy         Int?
  entregadoFrom       String?
  pedido              Pedido    @relation(fields: [pedidoId], references: [id], onDelete: Cascade)
}

model ActividadOperaciones {
  id        Int                          @id @default(autoincrement())
  pedidoId  Int
  tipoId    Int
  isChange  Boolean                      @default(false)
  changeOld String?                      @db.LongText
  changeNew String?                      @db.LongText
  createdAt DateTime                     @default(dbgenerated("(now())"))
  createdBy Int
  tipo      CatalogoActividadOperaciones @relation(fields: [tipoId], references: [id])
  pedido    Pedido                       @relation(fields: [pedidoId], references: [id], onDelete: Cascade)
}

model CatalogoActividadOperaciones {
  id        Int                    @id @default(autoincrement())
  clave     String
  tipo      String
  desc      String?
  actividad ActividadOperaciones[]
}

model ActividadClientes {
  id        Int                       @id @default(autoincrement())
  pedidoId  Int
  tipoId    Int
  isChange  Boolean                   @default(false)
  changeOld String?                   @db.LongText
  changeNew String?                   @db.LongText
  createdAt DateTime                  @default(dbgenerated("(now())"))
  createdBy Int                       @default(1)
  tipo      CatalogoActividadClientes @relation(fields: [tipoId], references: [id])
}

model ActividadPlataformaClientes {
  id        Int                                 @id @default(autoincrement())
  clienteId Int
  tipoId    Int
  createdAt DateTime                            @default(dbgenerated("(now())"))
  createdBy Int                                 @default(1)
  tipo      CatalogoActividadPlataformaClientes @relation(fields: [tipoId], references: [id])
  cliente   User                                @relation(fields: [clienteId], references: [id])
}

model CatalogoActividadPlataformaClientes {
  id        Int                           @id @default(autoincrement())
  clave     String
  tipo      String
  desc      String?
  actividad ActividadPlataformaClientes[]
}

model AppRoute {
  id          Int             @id @default(autoincrement())
  operadorId  Int
  isActive    Boolean         @default(true)
  isReceiving Boolean         @default(false)
  receivedAt  DateTime?
  receivedBy  Int?
  createdAt   DateTime        @default(dbgenerated("(now())"))
  createdBy   Int             @default(1)
  operador    Operadores      @relation(fields: [operadorId], references: [id])
  guias       AppRouteGuias[]
}

model AppRouteGuias {
  id       Int           @id @default(autoincrement())
  routeId  Int
  pedidoId Int
  tipo     RouteGuiaTipo
  pedido   Pedido        @relation(fields: [pedidoId], references: [id])
  route    AppRoute      @relation(fields: [routeId], references: [id])
}

model AppVisita {
  id           Int       @id @default(autoincrement())
  routeId      Int
  uuid         String
  lat          String?
  lng          String?
  pagoMonto    Float     @default(0)
  pagoFaltante Float     @default(0)
  cobroMonto   Float     @default(0)
  isCanceled   Boolean   @default(false)
  canceledAt   DateTime?
  canceledBy   Int?
  createdAt    DateTime  @default(dbgenerated("(now())"))
  createdBy    Int       @default(1)
}

model AppVisitaEventos {
  id         Int                      @id @default(autoincrement())
  uuid       String
  visitaId   Int?
  visitaUuid String
  tipoId     Int
  pedidoId   Int
  createdAt  DateTime                 @default(dbgenerated("(now())"))
  createdBy  Int                      @default(1)
  tipo       CatalogoAppVisitaEventos @relation(fields: [tipoId], references: [id])
}

model AppVisitaEventosEvidencias {
  id           Int      @id @default(autoincrement())
  eventoUuid   String
  evidenciaUrl String   @db.LongText
  createdAt    DateTime @default(dbgenerated("(now())"))
  createdBy    Int      @default(1)
}

model AppVisitaEventosMods {
  id           Int                   @id @default(autoincrement())
  eventoUuid   String
  evidenciaUrl String?               @db.LongText
  tipoId       Int
  createdAt    DateTime              @default(dbgenerated("(now())"))
  createdBy    Int                   @default(1)
  tipo         CatalogoAppVisitaMods @relation(fields: [tipoId], references: [id])
}

model CatalogoAppVisitaEventos {
  id      Int                @id @default(autoincrement())
  tipo    String
  desc    String
  eventos AppVisitaEventos[]
}

model CatalogoAppVisitaMods {
  id      Int                    @id @default(autoincrement())
  tipo    String
  desc    String
  eventos AppVisitaEventosMods[]
}

model Operadores {
  id           Int                   @id @default(autoincrement())
  correo       String                @unique
  nombre       String
  password     String?
  tipoId       Int                   @default(1)
  celular      String?
  countryCode  String?
  fotoUrl      String?               @db.LongText
  fotoPublicId String?               @db.LongText
  fotoPath     String?
  createdAt    DateTime              @default(dbgenerated("(now())"))
  createdBy    Int                   @default(1)
  isLocked     Boolean               @default(false)
  lockedAt     DateTime?
  lockedBy     Int?
  isDeleted    Boolean               @default(false)
  deletedAt    DateTime?
  deletedBy    Int?
  routes       AppRoute[]
  tipo         CatalogoUsuariosTipos @relation(fields: [tipoId], references: [id])
}

model UsuariosHawk {
  id             Int                           @id @default(autoincrement())
  nombre         String
  password       String
  correo         String                        @unique
  rol            UsuariosHawkRoles
  departamentoId Int                           @default(1)
  tipoId         Int                           @default(1)
  celular        String?
  countryCode    String?
  fotoUrl        String?                       @db.LongText
  fotoPublicId   String?                       @db.LongText
  fotoPath       String?
  createdAt      DateTime                      @default(dbgenerated("(now())"))
  createdBy      Int                           @default(1)
  isLocked       Boolean                       @default(false)
  lockedAt       DateTime?
  lockedBy       Int?
  isDeleted      Boolean                       @default(false)
  deletedAt      DateTime?
  deletedBy      Int?
  departamento   CatalogoUsuariosDepartamentos @relation(fields: [departamentoId], references: [id])
  tipo           CatalogoUsuariosTipos         @relation(fields: [tipoId], references: [id])
}

model CatalogoUsuariosEmpresas {
  id        Int                     @id @default(autoincrement())
  empresa   String
  desc      String?
  createdAt DateTime                @default(dbgenerated("(now())"))
  createdBy Int                     @default(1)
  areas     CatalogoUsuariosAreas[]
}

model CatalogoUsuariosAreas {
  id            Int                             @id @default(autoincrement())
  area          String
  empresaId     Int
  desc          String?
  createdAt     DateTime                        @default(dbgenerated("(now())"))
  createdBy     Int                             @default(1)
  empresa       CatalogoUsuariosEmpresas        @relation(fields: [empresaId], references: [id])
  departamentos CatalogoUsuariosDepartamentos[]
}

model CatalogoUsuariosDepartamentos {
  id           Int                   @id @default(autoincrement())
  departamento String
  areaId       Int
  desc         String?
  createdAt    DateTime              @default(dbgenerated("(now())"))
  createdBy    Int                   @default(1)
  area         CatalogoUsuariosAreas @relation(fields: [areaId], references: [id])
  usuario      UsuariosHawk[]
}

model CatalogoUsuariosTipos {
  id         Int            @id @default(autoincrement())
  tipo       String
  desc       String?
  usuario    UsuariosHawk[]
  operadores Operadores[]
}

model CatalogoFotos {
  id        Int      @id @default(autoincrement())
  platform  String   @default("cloudinary")
  public_id String   @db.LongText
  url       String   @db.LongText
  path      String?
  folder    String?
  nombre    String?
  asset_id  String?
  createdAt DateTime @default(dbgenerated("(now())"))
  createdBy Int
}

model Ticket {
  id        Int                    @id @default(autoincrement())
  clienteId Int
  viaId     TicketVia
  asuntoId  Int
  estatusId Int
  desc      String?
  createdAt DateTime               @default(dbgenerated("(now())"))
  createdBy Int
  items     TicketItems[]
  asunto    CatalogoAsuntosTickets @relation(fields: [asuntoId], references: [id])
}

model TicketItems {
  id         Int            @id @default(autoincrement())
  ticketId   Int
  tipoItemId TicketTipoItem
  createdAt  DateTime       @default(dbgenerated("(now())"))
  createdBy  Int
  ticket     Ticket         @relation(fields: [ticketId], references: [id], onDelete: Cascade)
}

model CatalogoAsuntosTickets {
  id     Int      @id @default(autoincrement())
  tipo   String
  desc   String?
  ticket Ticket[]
}

model CatalogoEstatusTickets {
  id      Int     @id @default(autoincrement())
  estatus String
  desc    String?
}

model Incidencia {
  id          Int                      @id @default(autoincrement())
  pedidoId    Int
  tipoId      Int                      @default(1)
  motivoId    Int                      @default(1)
  comentarios String?
  lat         String?
  lng         String?
  createdAt   DateTime                 @default(dbgenerated("(now())"))
  createdBy   Int                      @default(1)
  fotos       IncidenciaFoto[]
  pedido      Pedido                   @relation(fields: [pedidoId], references: [id], onDelete: Cascade)
  motivo      CatalogoIncidenciaMotivo @relation(fields: [motivoId], references: [id], onDelete: Cascade)
  tipo        CatalogoIncidenciaTipo   @relation(fields: [tipoId], references: [id], onDelete: Cascade)
}

model IncidenciaFoto {
  id           Int        @id @default(autoincrement())
  incidenciaId Int
  fotoUrl      String     @db.LongText
  takenAt      DateTime?
  createdAt    DateTime   @default(dbgenerated("(now())"))
  createdBy    Int        @default(1)
  incidencia   Incidencia @relation(fields: [incidenciaId], references: [id], onDelete: Cascade)
}

model CatalogoIncidenciaMotivo {
  id          Int          @id @default(autoincrement())
  motivo      String
  desc        String?
  incidencias Incidencia[]
}

model CatalogoIncidenciaTipo {
  id          Int          @id @default(autoincrement())
  tipo        String
  desc        String?
  incidencias Incidencia[]
}

model Direccion {
  id              Int                     @id @default(autoincrement())
  clienteId       Int
  nombreDireccion String
  contactoNombre  String?
  contactoTel     String
  cpId            Int
  calle           String
  numero          String
  numeroInt       String
  colonia         String
  otraColonia     Boolean                 @default(false)
  municipioId     Int
  empresa         String?
  referencias     String?
  lat             String?
  lng             String?
  createdAt       DateTime                @default(now()) @db.DateTime(0)
  updatedAt       DateTime?               @default(now()) @db.DateTime(0)
  updatedBy       Int?
  color           String?
  icon            String?
  user            User                    @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  municipio       CatalogoMunicipios      @relation(fields: [municipioId], references: [id], onDelete: Cascade)
  cp              CatalogoCodigosPostales @relation(fields: [cpId], references: [id])

  @@index([clienteId], map: "Misdirecciones_clienteId_fkey")
  @@index([municipioId], map: "Misdirecciones_municipioId_fkey")
  @@map("Misdirecciones")
}

model Destino {
  id             Int                     @id @default(autoincrement())
  clienteId      Int
  contactoNombre String?
  contactoTel    String
  cpId           Int
  calle          String
  numero         String
  numeroInt      String
  colonia        String
  otraColonia    Boolean                 @default(false)
  municipioId    Int
  empresa        String?
  referencias    String?
  lat            String?
  lng            String?
  createdAt      DateTime                @default(now()) @db.DateTime(0)
  updatedAt      DateTime?               @default(now()) @db.DateTime(0)
  updatedBy      Int?
  sinCp          Boolean                 @default(false)
  user           User                    @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  municipio      CatalogoMunicipios      @relation(fields: [municipioId], references: [id], onDelete: Cascade)
  cp             CatalogoCodigosPostales @relation(fields: [cpId], references: [id])

  @@index([clienteId], map: "Misdestinos_clienteId_fkey")
  @@index([municipioId], map: "Misdestinos_municipioId_fkey")
  @@map("Misdestinos")
}

model Paquete {
  id            Int                   @id @default(autoincrement())
  clienteId     Int
  nombrePaquete String
  paqTipoId     Int
  paqEmpaqueId  Int                   @default(1)
  paqAncho      Float
  paqLargo      Float
  paqAlto       Float
  paqPeso       Float
  paqContenido  String?
  paqPesoVol    Float
  createdAt     DateTime              @default(now()) @db.DateTime(0)
  updatedAt     DateTime?             @default(now()) @db.DateTime(0)
  user          User                  @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  tipo          CatalogoTiposPaquetes @relation(fields: [paqTipoId], references: [id], onDelete: Cascade)

  @@index([clienteId], map: "Mispaquetes_clienteId_fkey")
  @@index([paqTipoId], map: "Mispaquetes_paqTipoId_fkey")
  @@map("Mispaquetes")
}

model CobrosDestino {
  id                    Int                        @id @default(autoincrement())
  clienteId             Int
  pedidoId              Int                        @unique
  cantidad              Float                      @default(0)
  estatusCobroId        Int                        @default(1)
  estatusPagoCobroId    Int                        @default(1)
  comentario            String?
  cobradoAt             DateTime?
  cobradoBy             Int?
  confirmadoAt          DateTime?
  confirmadoBy          Int?
  retornado             Boolean                    @default(false)
  retornoFormaId        Int                        @default(1)
  retornoAt             DateTime?
  retornoBy             Int?
  canceladoAt           DateTime?
  canceladoBy           Int?
  createdAt             DateTime                   @default(now()) @db.DateTime(0)
  createdBy             Int?
  retornoComprobanteUrl String?                    @db.LongText
  corteId               Int?
  cliente               User                       @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  estatusCobro          CatalogoEstatusCobros      @relation(fields: [estatusCobroId], references: [id], onDelete: Cascade)
  estatusPagoCobro      CatalogoEstatusPagoCobros  @relation(fields: [estatusPagoCobroId], references: [id], onDelete: Cascade)
  pedido                Pedido                     @relation(fields: [pedidoId], references: [id], onDelete: Cascade)
  retornoForma          CatalogoTiposRetornoCobros @relation(fields: [retornoFormaId], references: [id], onDelete: Cascade)
  corte                 CobrosCortes?              @relation(fields: [corteId], references: [id], onDelete: Cascade)

  @@index([clienteId], map: "CobrosDestino_clienteId_fkey")
  @@index([estatusCobroId], map: "CobrosDestino_estatusCobroId_fkey")
  @@index([estatusPagoCobroId], map: "CobrosDestino_estatusPagoCobroId_fkey")
  @@index([retornoFormaId], map: "CobrosDestino_retornoFormaId_fkey")
  @@index([pedidoId], map: "CobrosDestino_pedidoId_fkey")
}

model CobrosCortes {
  id               Int                        @id @default(autoincrement())
  clienteId        Int
  estatusRetornoId Int                        @default(1)
  tipoRetornoId    Int                        @default(1)
  retornoAt        DateTime?
  retornoBy        Int?
  comprobanteUrl   String?                    @db.LongText
  createdAt        DateTime                   @default(dbgenerated("(now())"))
  estatusRetorno   CatalogoEstatusPagoCobros  @relation(fields: [estatusRetornoId], references: [id])
  tipoRetorno      CatalogoTiposRetornoCobros @relation(fields: [tipoRetornoId], references: [id])
  cliente          User                       @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  cobros           CobrosDestino[]
}

model CatalogoMetodosPago {
  id              Int             @id @default(autoincrement())
  tipo            String
  descripcion     String?
  comprobante_req Int             @default(0)
  pedido          Pedido[]
  pedidosHistory  PedidoHistory[]
}

model CatalogoActividadClientes {
  id        Int                 @id @default(autoincrement())
  tipo      String
  icon      String?
  color     String?
  desc      String?
  actividad ActividadClientes[]
}

model CatalogoEstatusPago {
  id             Int             @id @default(autoincrement())
  estatus        String
  descripcion    String?
  pedido         Pedido[]
  pedidosHistory PedidoHistory[]
}

model CatalogoTiposClientes {
  id   Int     @id @default(autoincrement())
  tipo String
  desc String?
}

model CatalogoEstatusRecolecciones {
  id                   Int                  @id @default(autoincrement())
  estatus              String
  desc                 String?
  recolecciones        Recoleccion[]
  recoleccionesHistory RecoleccionHistory[]
}

model CatalogoEstatusPedidos {
  id             Int             @id @default(autoincrement())
  estatus        String
  desc           String?
  pedidos        Pedido[]
  pedidosHistory PedidoHistory[]
}

model CatalogoTiposPaquetes {
  id             Int                 @id @default(autoincrement())
  tipo           String
  desc           String?
  createdAt      DateTime            @default(dbgenerated("(now())"))
  createdBy      Int                 @default(1)
  producto       CatalogoProductos[]
  paquetes       Paquete[]
  pedidos        Pedido[]
  pedidosHistory PedidoHistory[]
}

model CatalogoEmpaquesPaquetes {
  id      Int     @id @default(autoincrement())
  empaque String
  desc    String?
}

model CatalogoEstatusCobros {
  id      Int             @id @default(autoincrement())
  estatus String
  desc    String?
  cobros  CobrosDestino[]
}

model CatalogoEstatusPagoCobros {
  id      Int             @id @default(autoincrement())
  estatus String
  desc    String?
  cobros  CobrosDestino[]
  cortes  CobrosCortes[]
}

model CatalogoTiposRetornoCobros {
  id     Int             @id @default(autoincrement())
  tipo   String
  desc   String?
  cobros CobrosDestino[]
  cortes CobrosCortes[]
}

model CatalogoCodigosPostales {
  id                   Int                  @id @unique
  municipioId          Int
  rutaId               Int
  coberturaId          Int
  lat                  String?
  lng                  String?
  base                 String?
  createdAt            DateTime             @default(dbgenerated("(now())"))
  createdBy            Int                  @default(1)
  municipio            CatalogoMunicipios   @relation(fields: [municipioId], references: [id], onDelete: Cascade)
  ruta                 CatalalogoRutas      @relation(fields: [rutaId], references: [id])
  cobertura            CatalogoCoberturas   @relation(fields: [coberturaId], references: [id])
  colonias             CatalogoColonias[]
  entregas             Pedido[]
  pedidosHistory       PedidoHistory[]
  recolecciones        Recoleccion[]
  recoleccionesHistory RecoleccionHistory[]
  direcciones          Direccion[]
  destinos             Destino[]

  @@index([municipioId], map: "CatalogoCodigosPostales_municipioId_fkey")
}

model CatalogoColonias {
  id              Int                     @id @default(autoincrement())
  colonia         String
  cpId            Int
  tipo            String?                 @default("default")
  custom          Boolean?                @default(false)
  customCreatedAt DateTime?
  createdAt       DateTime                @default(dbgenerated("(now())"))
  createdBy       Int                     @default(1)
  cp              CatalogoCodigosPostales @relation(fields: [cpId], references: [id], onDelete: Cascade)

  @@index([cpId], map: "CatalogoColonias_cpId_fkey")
}

model CatalogoMunicipios {
  id                   Int                       @id @default(autoincrement())
  municipio            String
  abrev                String?
  estado               String                    @default("Nuevo León")
  pais                 String                    @default("México")
  createdAt            DateTime                  @default(dbgenerated("(now())"))
  createdBy            Int                       @default(1)
  colonias             CatalogoCodigosPostales[]
  destino              Destino[]
  direccion            Direccion[]
  pedidos              Pedido[]
  pedidosHistory       PedidoHistory[]
  recolecciones        Recoleccion[]
  recoleccionesHistory RecoleccionHistory[]
}

model CatalalogoRutas {
  id              Int                       @id @default(autoincrement())
  clave           String
  nombre          String
  createdAt       DateTime                  @default(dbgenerated("(now())"))
  createdBy       Int                       @default(1)
  codigosPostales CatalogoCodigosPostales[]
}

model CatalogoProductos {
  id              Int                   @id @default(autoincrement())
  nombre          String
  descripcion     String
  tipo_paquete_id Int
  cobertura_id    Int                   @default(1)
  peso_min        Int
  peso_max        Int
  precio          Float
  createdAt       DateTime              @default(dbgenerated("(now())"))
  createdBy       Int                   @default(1)
  cobertura       CatalogoCoberturas    @relation(fields: [cobertura_id], references: [id], onDelete: Cascade)
  tipo            CatalogoTiposPaquetes @relation(fields: [tipo_paquete_id], references: [id], onDelete: Cascade)

  @@index([cobertura_id], map: "CatalogoProductos_cobertura_id_fkey")
  @@index([tipo_paquete_id], map: "CatalogoProductos_tipo_paquete_id_fkey")
}

model CatalogoCoberturas {
  id          Int                       @id @default(autoincrement())
  cobertura   String
  descripcion String?
  createdAt   DateTime?                 @default(dbgenerated("(now())"))
  createdBy   Int?                      @default(1)
  producto    CatalogoProductos[]
  cps         CatalogoCodigosPostales[]
}

model FechasBloqueadas {
  id     Int         @id @default(autoincrement())
  fecha  DateTime
  bloque TipoBloques
  tipo   TipoFecha
}

model OtpCodes {
  id          Int            @id @default(autoincrement())
  uuid        String
  app         OtpApplication
  code        Int
  email       String?
  phone       String?
  countryCode String?
  expireAt    DateTime       @default(dbgenerated("(now() + interval 30 minute)"))
  createdAt   DateTime       @default(dbgenerated("(now())"))
}

model KommoApiAccount {
  id           Int       @id @default(autoincrement())
  name         String
  clientId     String    @db.LongText
  clientSecret String    @db.LongText
  accessToken  String    @db.LongText
  refreshToken String    @db.LongText
  redirectUri  String    @db.LongText
  expiresIn    Int?
  updatedAt    DateTime?
}

model KommoSync {
  id        Int           @id @default(autoincrement())
  clientId  Int
  tipo      TipoKommoSync @default(add)
  isProc    Boolean       @default(false)
  procAt    DateTime?
  createdAt DateTime      @default(dbgenerated("(now())"))
  cliente   User          @relation(fields: [clientId], references: [id])
}

model ConfiguracionHorarios {
  id                       Int       @id @default(autoincrement())
  bloque1GuiasLimitEnabled Boolean   @default(false)
  bloque2GuiasLimitEnabled Boolean   @default(false)
  bloque1GuiasLimit        Int
  bloque2GuiasLimit        Int
  bloque1HoraLimit         Int
  bloque1MinutosLimit      Int
  bloque2HoraLimit         Int
  bloque2MinutosLimit      Int
  createdAt                DateTime? @default(dbgenerated("(now())"))
  createdBy                Int?      @default(1)
  updatedAt                DateTime? @updatedAt
  updatedBy                Int?      @default(1)
}

enum TipoBloques {
  AM
  PM
  DIA
}

enum TipoFecha {
  REC
  ENT
  AMBOS
}

enum OtpApplication {
  register
  passwordChange
  phoneVerify
  other
}

enum TicketTipoItem {
  texto
  imagen
  video
}

enum TicketVia {
  whatsapp
  email
  hawk
}

enum TipoKommoSync {
  add
  update
  delete
}

enum UsuariosHawkRoles {
  superUser
  admin
  user
}

enum EstatusPrintBatch {
  pendiente
  imprimiendo
  completado
}

enum RouteGuiaTipo {
  Recoleccion
  entrega
}
